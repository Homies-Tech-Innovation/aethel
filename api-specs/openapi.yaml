openapi: 3.0.0
info:
  title: Aethel API Contract
  version: 1.1.0
  description: This is the Aethel API contract (v1.1.0), defining endpoints for
    authentication, user management, document hierarchy, AI-powered features, and
    other core services used by Aethel's frontend and backend.
servers:
  - url: http://localhost:3000
    description: Development server
paths:
  "/auth/register":
    post:
      summary: Register a new user
      description: Creates a new user account.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - displayName
                - email
                - password
              properties:
                displayName:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                password:
                  type: string
                  format: password
                  example: password
      responses:
        "201":
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
  "/auth/login":
    post:
      summary: Log In A User
      description: Authenticates a user and sets access and refresh tokens in secure,
        HttpOnly cookies.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                password:
                  type: string
                  format: password
                  example: password
      responses:
        "200":
          description: Login successful. Tokens are in cookies.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: accessToken=...; refreshToken=...
        "401":
          $ref: "#/components/responses/Unauthorized"
  "/auth/logout":
    post:
      summary: Log Out A User
      description: Clears the authentication cookies.
      tags:
        - Auth
      responses:
        "200":
          description: Logout successful
          headers:
            Set-Cookie:
              schema:
                type: string
                example: accessToken=; Max-Age=0; refreshToken=; Max-Age=0
        "401":
          $ref: "#/components/responses/Unauthorized"
  "/auth/verify-email":
    post:
      summary: Verify Email Address
      description: Confirms a user's email address using a token.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - verificationToken
              properties:
                verificationToken:
                  type: string
                  example: hygbYGIYU...
      responses:
        "200":
          description: Email verified successfully
        "400":
          $ref: "#/components/responses/BadRequest"
  "/auth/forgot-password":
    post:
      summary: Request Password Reset
      description: Starts the password reset flow.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
      responses:
        "200":
          description: Password reset email sent
        "404":
          $ref: "#/components/responses/NotFound"
  "/auth/reset-password":
    post:
      summary: Perform Password Reset
      description: Sets a new password using a reset token.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - resetToken
                - newPassword
              properties:
                resetToken:
                  type: string
                  example: the-unique-token-from-the-email-link...
                newPassword:
                  type: string
                  format: password
                  example: a-new-strong-password
      responses:
        "200":
          description: Password reset successful
        "400":
          $ref: "#/components/responses/BadRequest"
  "/auth/refresh":
    post:
      summary: Refresh Access Token
      description: Issues a new access token using the refresh token from the cookie,
        returning it in a new cookie.
      tags:
        - Auth
      responses:
        "200":
          description: Token refreshed successfully.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: accessToken=...
        "401":
          $ref: "#/components/responses/Unauthorized"
  "/users/me":
    get:
      summary: Get Current User's Profile
      description: Retrieves the profile for the authenticated user.
      tags:
        - Users
      security:
        - CookieAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"
    patch:
      summary: Update Current User's Profile
      description: Updates profile information like displayName.
      tags:
        - Users
      security:
        - CookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                displayName:
                  type: string
                  example: John Doe
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
    delete:
      summary: Delete Current User's Account
      description: Deletes the user and all associated data.
      tags:
        - Users
      security:
        - CookieAuth: []
      responses:
        "204":
          description: No Content - User successfully deleted
        "401":
          $ref: "#/components/responses/Unauthorized"
  "/users/me/avatar":
    patch:
      summary: Update Current User's Avatar
      description: Updates the avatar URL for the authenticated user.
      tags:
        - Users
      security:
        - CookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - avatarUrl
              properties:
                avatarUrl:
                  type: string
                  format: uri
                  example: https://cdn.example.com/avatars/user123.png
      responses:
        "200":
          description: Avatar updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
  "/workspace/hierarchy":
    get:
      summary: Get Workspace Hierarchy
      description: Retrieves the entire nested folder and document structure for the
        authenticated user. Ideal for building a file tree UI.
      tags:
        - Workspace
      security:
        - CookieAuth: []
      responses:
        "200":
          description: A nested tree of folders and documents.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkspaceNode"
        "401":
          $ref: "#/components/responses/Unauthorized"
  "/folders":
    post:
      summary: Create a New Folder
      description: Creates a new folder for the authenticated user.
      tags:
        - Folders
      security:
        - CookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: My Documents
                parentId:
                  type: string
                  format: uuid
                  nullable: true
                  example: null
      responses:
        "201":
          description: Folder created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Folder"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
  "/folders/{id}":
    get:
      summary: Get Folder by ID
      description: Retrieves a specific folder by ID.
      tags:
        - Folders
      security:
        - CookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Folder details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Folder"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"
    patch:
      summary: Update Folder
      description: Updates a folder's name.
      tags:
        - Folders
      security:
        - CookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Updated Folder Name
      responses:
        "200":
          description: Folder updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Folder"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"
    delete:
      summary: Delete Folder
      description: Deletes a folder and all its contents.
      tags:
        - Folders
      security:
        - CookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Folder deleted successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"
  "/documents":
    post:
      summary: Create a New Document
      description: Creates a new document with markdown content.
      tags:
        - Documents
      security:
        - CookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fileName
                - content
              properties:
                fileName:
                  type: string
                  example: My Note.md
                content:
                  type: string
                  example: "# Hello World\n\nThis is **markdown** content"
                folderId:
                  type: string
                  format: uuid
                  nullable: true
                  example: null
      responses:
        "201":
          description: Document created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Document"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
  "/documents/{id}":
    get:
      summary: Get Document by ID
      description: Retrieves a specific document by ID.
      tags:
        - Documents
      security:
        - CookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Document details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Document"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"
    patch:
      summary: Update Document
      description: Updates a document's content, fileName, or folder.
      tags:
        - Documents
      security:
        - CookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fileName:
                  type: string
                  example: Updated Note.md
                content:
                  type: string
                  example: "# Updated Content"
                folderId:
                  type: string
                  format: uuid
                  nullable: true
      responses:
        "200":
          description: Document updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Document"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"
    delete:
      summary: Delete Document
      description: Deletes a document.
      tags:
        - Documents
      security:
        - CookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Document deleted successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"
  # ============================================
  # IMAGE ENDPOINTS
  # ============================================
  /images:
    post:
      summary: Upload an Image
      description: Uploads an image file and returns its metadata.
      tags:
        - Images
      security:
        - CookieAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                documentId:
                  type: string
                  format: uuid
                  description: Optionally associate image with a document.
                folderId:
                  type: string
                  format: uuid
                  description: Optionally associate image with a folder for hierarchy.
      responses:
        "201":
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /images/{id}:
    get:
      summary: Get Image by ID
      description: Retrieves image metadata.
      tags:
        - Images
      security:
        - CookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Image metadata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"
  "/ai/message":
    post:
      summary: Send a message to the AI
      description: Sends a user's message to the AI for processing and receives a
        suggestion. Chat history is not supported.
      tags:
        - AI
      security:
        - CookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  example: Can you refactor this document to be more concise?
      responses:
        "200":
          description: AI response received successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AIResponseMessage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
  "/ai/chat":
    post:
      summary: Send a message to the AI
      description: |-
        Sends a user's message to the AI for processing.
        - To start a new chat, omit `chatSessionId`. The server will create a new session and return its ID.
        - To continue an existing chat, provide the `chatSessionId`.
      tags:
        - AI
      security:
        - CookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                chatSessionId:
                  type: string
                  format: uuid
                  nullable: true
                  description: Provide to continue an existing chat, or null to start
                    a new one.
                message:
                  type: string
                  example: Can you refactor this document to be more concise?
      responses:
        "200":
          description: AI response received successfully. The session ID is always
            returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatInteractionResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
  "/ai/chats":
    get:
      summary: Get All Chat Sessions
      description: Retrieves a list of summaries for all past AI chat sessions for
        the user.
      tags:
        - AI
      security:
        - CookieAuth: []
      responses:
        "200":
          description: A list of chat session summaries.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChatSessionSummary"
        "401":
          $ref: "#/components/responses/Unauthorized"
  "/ai/chats/{id}":
    get:
      summary: Get Chat Session History
      description: Retrieves the full message history for a specific AI chat session.
      tags:
        - AI
      security:
        - CookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: The full chat history.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatSession"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"
    delete:
      summary: Delete Chat
      description: Deletes a chat session history.
      tags:
        - AI
      security:
        - CookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Chat deleted successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"
  "/ai/suggestions/{id}":
    get:
      summary: Get an AI Suggestion
      description: Retrieves the content of changes for one or more documents as
        suggested by the AI.
      tags:
        - AI
      security:
        - CookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: The suggested document changes.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AISuggestion"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"
components:
  securitySchemes:
    CookieAuth:
      type: apiKey
      in: cookie
      name: accessToken
  schemas:
    AIResponseMessage:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: Aethel is a powerful markdown editor...
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        displayName:
          type: string
        email:
          type: string
          format: email
        avatarUrl:
          type: string
          format: uri
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Folder:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        parentId:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Document:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        folderId:
          type: string
          format: uuid
          nullable: true
        fileName:
          type: string
          example: My Note.md
        content:
          type: string
          example: "# Hello World\n\nThis is **markdown**"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Image:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        documentId:
          type: string
          format: uuid
          nullable: true
        folderId:
          type: string
          format: uuid
          nullable: true
        storageUrl:
          type: string
          example: https://cdn.example.com/images/abc123.png
        fileName:
          type: string
          example: screenshot.png
        mimeType:
          type: string
          example: image/png
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    WorkspaceNode:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
          enum:
            - folder
            - file
        children:
          type: array
          items:
            $ref: "#/components/schemas/WorkspaceNode"
    ChatSessionSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          example: Concise refactoring discussion
        createdAt:
          type: string
          format: date-time
    ChatMessage:
      type: object
      properties:
        role:
          type: string
          enum:
            - user
            - ai
        content:
          type: string
        suggestionId:
          type: string
          format: uuid
          nullable: true
          description: The ID to fetch the content of an AI suggestion, if one was
            made.
        createdAt:
          type: string
          format: date-time
    ChatSession:
      type: object
      properties:
        id:
          type: string
          format: uuid
        messages:
          type: array
          items:
            $ref: "#/components/schemas/ChatMessage"
    AISuggestion:
      type: array
      items:
        type: object
        properties:
          documentId:
            type: string
            format: uuid
            description: The ID of the document to be updated.
          fileName:
            type: string
            description: The original fileName, for context on the frontend.
          content:
            type: string
            description: The new, suggested content for the document.
    ChatInteractionResponse:
      type: object
      properties:
        chatSessionId:
          type: string
          format: uuid
          description: The unique identifier for the chat session. This is returned
            on every interaction.
        aiMessage:
          $ref: "#/components/schemas/ChatMessage"
          description: The AI's response message.
    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
  responses:
    Unauthorized:
      description: Unauthorized - Invalid or missing token
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error: Unauthorized
            message: Invalid or missing access token
    BadRequest:
      description: Bad Request - Invalid input data
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error: Bad Request
            message: Invalid input data
    NotFound:
      description: Not Found - Resource does not exist
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error: Not Found
            message: Resource not found
